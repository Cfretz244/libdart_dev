#!/usr/bin/env ruby

#----- System Requires -----#

require 'erb'
require 'set'
require 'yaml'
require 'json'

#----- Globals -----#

DEFAULT_CONFIG = {
  'compilers' => {
    'gcc' => [
      '6.1.0',
      '6.2.0',
      '6.3.0',
      '6.4.0',
      '7.1.0',
      '7.2.0',
      '7.3.0',
      '7.4.0',
      '8.1.0',
      '8.2.0',
      '8.3.0'
    ],
    'clang' => [
      '6.0.0',
      '7.0.0',
      '8.0.0'
    ]
  },
  'base_url' => 'https://s3.amazonaws.com/compiler-explorer/opt',
  'base_path' => '/opt/toolchain'
}

#----- Helpers -----#

def url_for(name, version)
  base = @base_url
  base = base[0...-1] while base[-1] == '/'
  "#{base}/#{name}-#{version}.tar.xz"
end

def path_for(name, version)
  File.join(@base_path, "#{name}-#{version}")
end

def binary_for(name, cxx)
  case name.downcase
  when 'gcc' then cxx ? 'g++' : 'gcc'
  when 'clang' then cxx ? 'clang++' : 'clang'
  else raise "Encountered unknown compiler \"#{name}\""
  end
end

def c_compiler_for(name, version)
  File.join(path_for(name, version), 'bin', binary_for(name, false))
end

def cpp_compiler_for(name, version)
  File.join(path_for(name, version), 'bin', binary_for(name, true))
end

def compiler_image_for(name, version)
  image = "#{name}_#{version.gsub('.', '_')}"
  @images['compilers'].add(image)
  image
end

def builder_image_for(name, version)
  image = "dart_#{name}_#{version.gsub('.', '_')}"
  @images['builders'].add(image)
  image
end

def tester_image_for(name, version)
  image = "dart_#{name}_#{version.gsub('.', '_')}_tests"
  @images['tests'].add(image)
  image
end

# I amuse myself.
@decl = proc { |b| proc { |n| b.eval("@#{n} = DEFAULT_CONFIG['#{n}']") }  }.call(binding)
def default(*args)
  @decl.call(*args)
end

#----- Setup/Validate -----#

# Infer our build targets.
default 'base_url'
default 'base_path'
if ARGV.empty?
  default 'compilers'
elsif ARGV.size % 2 == 0
  # Interpret command line arguments as targets.
  @compilers = Hash.new { |h, k| h[k] = Array.new }
  ARGV.each_slice(2) { |cc, vid| @compilers[cc].push(vid) }
else
  raise 'Build script must be passed build targets in (compiler|version) pairs'
end

#----- Application Logic -----#

# Create our Dockerfile
@images = Hash.new { |h, k| h[k] = Set.new }
File.open('Dockerfile', 'w+') { |out| out << ERB.new(File.read('templates/Dockerfile.erb')).result(binding) }

# Build and tag each final image we generated.
# I continue to amuse myself
filter = ENV['PARTIAL_BUILD']
@images.values.map { |s| s.select { |v| !filter || !(v =~ /(dart|tests)/) } }.reduce(Set.new, :+).each do |img|
  puts "#### Starting to build image #{img}:"
  unless system("docker build --target #{img} -t #{img} .")
    raise "Image #{img} failed to build!"
  end
end
File.open('.dart_build_state', 'w+') { |out| out << @images['tests'].to_a.to_json } if !filter
